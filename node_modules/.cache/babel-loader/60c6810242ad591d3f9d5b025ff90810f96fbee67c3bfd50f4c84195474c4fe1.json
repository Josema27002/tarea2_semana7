{"ast":null,"code":"import axios from \"axios\";\nconst client = axios.create({\n  baseURL: `${process.env.VUE_APP_GITHUB_ENDPOINT}`,\n  headers: {\n    Accept: \"application/vnd.github.v3+json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${process.env.VUE_APP_GITHUB_TOKEN}`\n  }\n});\nexport default {\n  name: \"IssueList\",\n  data() {\n    return {\n      issues: []\n    };\n  },\n  methods: {\n    getIssues() {\n      client.get(\"/issues\").then(res => {\n        this.issues = res.data;\n      });\n    },\n    closeIssue(index) {\n      const target = this.issues[index];\n      client.patch(`/issues/${target.number}`, {\n        state: \"closed\"\n      }).then(() => {\n        this.issues.splice(index, 1);\n      });\n    }\n  },\n  created() {\n    this.getIssues();\n  }\n};","map":{"version":3,"names":["axios","client","create","baseURL","process","env","VUE_APP_GITHUB_ENDPOINT","headers","Accept","Authorization","VUE_APP_GITHUB_TOKEN","name","data","issues","methods","getIssues","get","then","res","closeIssue","index","target","patch","number","state","splice","created"],"sources":["src/views/IssueList.vue"],"sourcesContent":["<template>\n\t<div class=\"issues-app\">\n\t\t<br />\n\t\t<h1>ISSUES LIST</h1>\n\t\t<br />\n\t\t<el-button type=\"success\" @click=\"getIssues\">Get Issues</el-button>\n\t\t<form @submit.prevent=\"onAddissue\" class=\"add-issue-form\">\n\t\t\t<!-- <label for=\"issue\">New issue:</label> -->\n\t\t\t<div class=\"input-container\">\n\t\t\t\t<!-- <el-input v-model=\"issue\" type=\"text\" id=\"issue\" placeholder=\"Enter a new issue\" /> -->\n\t\t\t\t<!-- <el-button type=\"primary\" @click=\"onAddissue\">Add issue</el-button> -->\n\t\t\t</div>\n\t\t</form>\n\n\t\t<el-row :gutter=\"12\" class=\"issue-list\">\n\t\t\t<el-col :span=\"12\" v-for=\"(issue, index) in issues\" :key=\"index\">\n\t\t\t\t<el-card class=\"issue-card\" shadow=\"hover\">\n\t\t\t\t\t<el-row :gutter=\"12\">\n\t\t\t\t\t\t<el-col :span=\"18\">\n\t\t\t\t\t\t\t{{ issue.title }}\n\t\t\t\t\t\t</el-col>\n\t\t\t\t\t\t<el-col :span=\"4\">\n\t\t\t\t\t\t\t<el-button\n\t\t\t\t\t\t\t\ticon=\"el-icon-check\"\n\t\t\t\t\t\t\t\tcircle\n\t\t\t\t\t\t\t\ttype=\"success\"\n\t\t\t\t\t\t\t\t@click=\"closeIssue(index)\"\n\t\t\t\t\t\t\t></el-button>\n\t\t\t\t\t\t</el-col>\n\t\t\t\t\t</el-row>\n\t\t\t\t</el-card>\n\t\t\t</el-col>\n\t\t</el-row>\n\t</div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nconst client = axios.create({\n\tbaseURL: `${process.env.VUE_APP_GITHUB_ENDPOINT}`,\n\theaders: {\n\t\tAccept: \"application/vnd.github.v3+json\",\n\t\t\"Content-Type\": \"application/json\",\n\t\tAuthorization: `Bearer ${process.env.VUE_APP_GITHUB_TOKEN}`,\n\t},\n});\nexport default {\n\tname: \"IssueList\",\n\n\tdata() {\n\t\treturn {\n\t\t\tissues: [],\n\t\t};\n\t},\n\tmethods: {\n\t\tgetIssues() {\n\t\t\tclient.get(\"/issues\").then((res) => {\n\t\t\t\tthis.issues = res.data;\n\t\t\t});\n\t\t},\n\t\tcloseIssue(index) {\n\t\t\tconst target = this.issues[index];\n\t\t\tclient\n\t\t\t\t.patch(`/issues/${target.number}`, {\n\t\t\t\t\tstate: \"closed\",\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.issues.splice(index, 1);\n\t\t\t\t});\n\t\t},\n\t},\n    created() {\n        this.getIssues();\n    }\n};\n</script>\n\n<style>\n.issues-app {\n\tmax-width: 600px;\n\tmargin: auto;\n}\n\n.add-issue-form {\n\tmargin-bottom: 20px;\n}\n\n.issue-card {\n\tmargin: 5px 0;\n}\n\n.issue-list {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n}\n</style>\n"],"mappings":"AAqCA,OAAAA,KAAA;AAEA,MAAAC,MAAA,GAAAD,KAAA,CAAAE,MAAA;EACAC,OAAA,KAAAC,OAAA,CAAAC,GAAA,CAAAC,uBAAA;EACAC,OAAA;IACAC,MAAA;IACA;IACAC,aAAA,YAAAL,OAAA,CAAAC,GAAA,CAAAK,oBAAA;EACA;AACA;AACA;EACAC,IAAA;EAEAC,KAAA;IACA;MACAC,MAAA;IACA;EACA;EACAC,OAAA;IACAC,UAAA;MACAd,MAAA,CAAAe,GAAA,YAAAC,IAAA,CAAAC,GAAA;QACA,KAAAL,MAAA,GAAAK,GAAA,CAAAN,IAAA;MACA;IACA;IACAO,WAAAC,KAAA;MACA,MAAAC,MAAA,QAAAR,MAAA,CAAAO,KAAA;MACAnB,MAAA,CACAqB,KAAA,YAAAD,MAAA,CAAAE,MAAA;QACAC,KAAA;MACA,GACAP,IAAA;QACA,KAAAJ,MAAA,CAAAY,MAAA,CAAAL,KAAA;MACA;IACA;EACA;EACAM,QAAA;IACA,KAAAX,SAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}